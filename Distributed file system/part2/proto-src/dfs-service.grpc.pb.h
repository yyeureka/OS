// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dfs-service.proto
#ifndef GRPC_dfs_2dservice_2eproto__INCLUDED
#define GRPC_dfs_2dservice_2eproto__INCLUDED

#include "dfs-service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class Channel;
class CompletionQueue;
class ServerCompletionQueue;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc_impl

namespace grpc {
class ServerContext;
}  // namespace grpc

namespace dfs_service {

class DFSService final {
 public:
  static constexpr char const* service_full_name() {
    return "dfs_service.DFSService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Add your service calls here
    //
    // 1. REQUIRED (Parts 1 & 2): A method to store files on the server
    std::unique_ptr< ::grpc::ClientWriterInterface< ::dfs_service::FileContent>> Store(::grpc::ClientContext* context, ::dfs_service::Ack* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::dfs_service::FileContent>>(StoreRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::dfs_service::FileContent>> AsyncStore(::grpc::ClientContext* context, ::dfs_service::Ack* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::dfs_service::FileContent>>(AsyncStoreRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::dfs_service::FileContent>> PrepareAsyncStore(::grpc::ClientContext* context, ::dfs_service::Ack* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::dfs_service::FileContent>>(PrepareAsyncStoreRaw(context, response, cq));
    }
    // 2. REQUIRED (Parts 1 & 2): A method to fetch files from the server
    std::unique_ptr< ::grpc::ClientReaderInterface< ::dfs_service::FileContent>> Fetch(::grpc::ClientContext* context, const ::dfs_service::Request& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::dfs_service::FileContent>>(FetchRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::dfs_service::FileContent>> AsyncFetch(::grpc::ClientContext* context, const ::dfs_service::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::dfs_service::FileContent>>(AsyncFetchRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::dfs_service::FileContent>> PrepareAsyncFetch(::grpc::ClientContext* context, const ::dfs_service::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::dfs_service::FileContent>>(PrepareAsyncFetchRaw(context, request, cq));
    }
    // 3. REQUIRED (Parts 1 & 2): A method to list all files on the server
    std::unique_ptr< ::grpc::ClientReaderInterface< ::dfs_service::FileList>> List(::grpc::ClientContext* context, const ::dfs_service::Request& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::dfs_service::FileList>>(ListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::dfs_service::FileList>> AsyncList(::grpc::ClientContext* context, const ::dfs_service::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::dfs_service::FileList>>(AsyncListRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::dfs_service::FileList>> PrepareAsyncList(::grpc::ClientContext* context, const ::dfs_service::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::dfs_service::FileList>>(PrepareAsyncListRaw(context, request, cq));
    }
    // 4. REQUIRED (Parts 1 & 2): A method to get the status of a file on the server
    virtual ::grpc::Status Stat(::grpc::ClientContext* context, const ::dfs_service::Request& request, ::dfs_service::FileStat* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs_service::FileStat>> AsyncStat(::grpc::ClientContext* context, const ::dfs_service::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs_service::FileStat>>(AsyncStatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs_service::FileStat>> PrepareAsyncStat(::grpc::ClientContext* context, const ::dfs_service::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs_service::FileStat>>(PrepareAsyncStatRaw(context, request, cq));
    }
    // 5. REQUIRED (Part 2 only): A method to request a write lock from the server
    virtual ::grpc::Status RequestWriteAccess(::grpc::ClientContext* context, const ::dfs_service::WriteAccess& request, ::dfs_service::Ack* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs_service::Ack>> AsyncRequestWriteAccess(::grpc::ClientContext* context, const ::dfs_service::WriteAccess& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs_service::Ack>>(AsyncRequestWriteAccessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs_service::Ack>> PrepareAsyncRequestWriteAccess(::grpc::ClientContext* context, const ::dfs_service::WriteAccess& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs_service::Ack>>(PrepareAsyncRequestWriteAccessRaw(context, request, cq));
    }
    // 6. REQUIRED (Part 2 only): A method named CallbackList to handle asynchronous file listing requests
    //                            from a client. This method should return a listing of files along with their
    //                            attribute information. The expected attribute information should include name,
    //                            size, modified time, and creation time.
    virtual ::grpc::Status CallbackList(::grpc::ClientContext* context, const ::dfs_service::Request& request, ::dfs_service::CallbackFileList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs_service::CallbackFileList>> AsyncCallbackList(::grpc::ClientContext* context, const ::dfs_service::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs_service::CallbackFileList>>(AsyncCallbackListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs_service::CallbackFileList>> PrepareAsyncCallbackList(::grpc::ClientContext* context, const ::dfs_service::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs_service::CallbackFileList>>(PrepareAsyncCallbackListRaw(context, request, cq));
    }
    // 7. REQUIRED (Part 2 only): A method to delete a file from the server
    virtual ::grpc::Status Delete(::grpc::ClientContext* context, const ::dfs_service::WriteAccess& request, ::dfs_service::Ack* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs_service::Ack>> AsyncDelete(::grpc::ClientContext* context, const ::dfs_service::WriteAccess& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs_service::Ack>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs_service::Ack>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::dfs_service::WriteAccess& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs_service::Ack>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Add your service calls here
      //
      // 1. REQUIRED (Parts 1 & 2): A method to store files on the server
      virtual void Store(::grpc::ClientContext* context, ::dfs_service::Ack* response, ::grpc::experimental::ClientWriteReactor< ::dfs_service::FileContent>* reactor) = 0;
      // 2. REQUIRED (Parts 1 & 2): A method to fetch files from the server
      virtual void Fetch(::grpc::ClientContext* context, ::dfs_service::Request* request, ::grpc::experimental::ClientReadReactor< ::dfs_service::FileContent>* reactor) = 0;
      // 3. REQUIRED (Parts 1 & 2): A method to list all files on the server
      virtual void List(::grpc::ClientContext* context, ::dfs_service::Request* request, ::grpc::experimental::ClientReadReactor< ::dfs_service::FileList>* reactor) = 0;
      // 4. REQUIRED (Parts 1 & 2): A method to get the status of a file on the server
      virtual void Stat(::grpc::ClientContext* context, const ::dfs_service::Request* request, ::dfs_service::FileStat* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Stat(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs_service::FileStat* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Stat(::grpc::ClientContext* context, const ::dfs_service::Request* request, ::dfs_service::FileStat* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Stat(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs_service::FileStat* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // 5. REQUIRED (Part 2 only): A method to request a write lock from the server
      virtual void RequestWriteAccess(::grpc::ClientContext* context, const ::dfs_service::WriteAccess* request, ::dfs_service::Ack* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestWriteAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs_service::Ack* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestWriteAccess(::grpc::ClientContext* context, const ::dfs_service::WriteAccess* request, ::dfs_service::Ack* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void RequestWriteAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs_service::Ack* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // 6. REQUIRED (Part 2 only): A method named CallbackList to handle asynchronous file listing requests
      //                            from a client. This method should return a listing of files along with their
      //                            attribute information. The expected attribute information should include name,
      //                            size, modified time, and creation time.
      virtual void CallbackList(::grpc::ClientContext* context, const ::dfs_service::Request* request, ::dfs_service::CallbackFileList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CallbackList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs_service::CallbackFileList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CallbackList(::grpc::ClientContext* context, const ::dfs_service::Request* request, ::dfs_service::CallbackFileList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CallbackList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs_service::CallbackFileList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // 7. REQUIRED (Part 2 only): A method to delete a file from the server
      virtual void Delete(::grpc::ClientContext* context, const ::dfs_service::WriteAccess* request, ::dfs_service::Ack* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs_service::Ack* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::dfs_service::WriteAccess* request, ::dfs_service::Ack* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs_service::Ack* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientWriterInterface< ::dfs_service::FileContent>* StoreRaw(::grpc::ClientContext* context, ::dfs_service::Ack* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::dfs_service::FileContent>* AsyncStoreRaw(::grpc::ClientContext* context, ::dfs_service::Ack* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::dfs_service::FileContent>* PrepareAsyncStoreRaw(::grpc::ClientContext* context, ::dfs_service::Ack* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::dfs_service::FileContent>* FetchRaw(::grpc::ClientContext* context, const ::dfs_service::Request& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::dfs_service::FileContent>* AsyncFetchRaw(::grpc::ClientContext* context, const ::dfs_service::Request& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::dfs_service::FileContent>* PrepareAsyncFetchRaw(::grpc::ClientContext* context, const ::dfs_service::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::dfs_service::FileList>* ListRaw(::grpc::ClientContext* context, const ::dfs_service::Request& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::dfs_service::FileList>* AsyncListRaw(::grpc::ClientContext* context, const ::dfs_service::Request& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::dfs_service::FileList>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::dfs_service::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dfs_service::FileStat>* AsyncStatRaw(::grpc::ClientContext* context, const ::dfs_service::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dfs_service::FileStat>* PrepareAsyncStatRaw(::grpc::ClientContext* context, const ::dfs_service::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dfs_service::Ack>* AsyncRequestWriteAccessRaw(::grpc::ClientContext* context, const ::dfs_service::WriteAccess& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dfs_service::Ack>* PrepareAsyncRequestWriteAccessRaw(::grpc::ClientContext* context, const ::dfs_service::WriteAccess& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dfs_service::CallbackFileList>* AsyncCallbackListRaw(::grpc::ClientContext* context, const ::dfs_service::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dfs_service::CallbackFileList>* PrepareAsyncCallbackListRaw(::grpc::ClientContext* context, const ::dfs_service::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dfs_service::Ack>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::dfs_service::WriteAccess& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dfs_service::Ack>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::dfs_service::WriteAccess& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientWriter< ::dfs_service::FileContent>> Store(::grpc::ClientContext* context, ::dfs_service::Ack* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::dfs_service::FileContent>>(StoreRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::dfs_service::FileContent>> AsyncStore(::grpc::ClientContext* context, ::dfs_service::Ack* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::dfs_service::FileContent>>(AsyncStoreRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::dfs_service::FileContent>> PrepareAsyncStore(::grpc::ClientContext* context, ::dfs_service::Ack* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::dfs_service::FileContent>>(PrepareAsyncStoreRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::dfs_service::FileContent>> Fetch(::grpc::ClientContext* context, const ::dfs_service::Request& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::dfs_service::FileContent>>(FetchRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::dfs_service::FileContent>> AsyncFetch(::grpc::ClientContext* context, const ::dfs_service::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::dfs_service::FileContent>>(AsyncFetchRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::dfs_service::FileContent>> PrepareAsyncFetch(::grpc::ClientContext* context, const ::dfs_service::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::dfs_service::FileContent>>(PrepareAsyncFetchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::dfs_service::FileList>> List(::grpc::ClientContext* context, const ::dfs_service::Request& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::dfs_service::FileList>>(ListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::dfs_service::FileList>> AsyncList(::grpc::ClientContext* context, const ::dfs_service::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::dfs_service::FileList>>(AsyncListRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::dfs_service::FileList>> PrepareAsyncList(::grpc::ClientContext* context, const ::dfs_service::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::dfs_service::FileList>>(PrepareAsyncListRaw(context, request, cq));
    }
    ::grpc::Status Stat(::grpc::ClientContext* context, const ::dfs_service::Request& request, ::dfs_service::FileStat* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs_service::FileStat>> AsyncStat(::grpc::ClientContext* context, const ::dfs_service::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs_service::FileStat>>(AsyncStatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs_service::FileStat>> PrepareAsyncStat(::grpc::ClientContext* context, const ::dfs_service::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs_service::FileStat>>(PrepareAsyncStatRaw(context, request, cq));
    }
    ::grpc::Status RequestWriteAccess(::grpc::ClientContext* context, const ::dfs_service::WriteAccess& request, ::dfs_service::Ack* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs_service::Ack>> AsyncRequestWriteAccess(::grpc::ClientContext* context, const ::dfs_service::WriteAccess& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs_service::Ack>>(AsyncRequestWriteAccessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs_service::Ack>> PrepareAsyncRequestWriteAccess(::grpc::ClientContext* context, const ::dfs_service::WriteAccess& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs_service::Ack>>(PrepareAsyncRequestWriteAccessRaw(context, request, cq));
    }
    ::grpc::Status CallbackList(::grpc::ClientContext* context, const ::dfs_service::Request& request, ::dfs_service::CallbackFileList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs_service::CallbackFileList>> AsyncCallbackList(::grpc::ClientContext* context, const ::dfs_service::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs_service::CallbackFileList>>(AsyncCallbackListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs_service::CallbackFileList>> PrepareAsyncCallbackList(::grpc::ClientContext* context, const ::dfs_service::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs_service::CallbackFileList>>(PrepareAsyncCallbackListRaw(context, request, cq));
    }
    ::grpc::Status Delete(::grpc::ClientContext* context, const ::dfs_service::WriteAccess& request, ::dfs_service::Ack* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs_service::Ack>> AsyncDelete(::grpc::ClientContext* context, const ::dfs_service::WriteAccess& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs_service::Ack>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs_service::Ack>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::dfs_service::WriteAccess& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs_service::Ack>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Store(::grpc::ClientContext* context, ::dfs_service::Ack* response, ::grpc::experimental::ClientWriteReactor< ::dfs_service::FileContent>* reactor) override;
      void Fetch(::grpc::ClientContext* context, ::dfs_service::Request* request, ::grpc::experimental::ClientReadReactor< ::dfs_service::FileContent>* reactor) override;
      void List(::grpc::ClientContext* context, ::dfs_service::Request* request, ::grpc::experimental::ClientReadReactor< ::dfs_service::FileList>* reactor) override;
      void Stat(::grpc::ClientContext* context, const ::dfs_service::Request* request, ::dfs_service::FileStat* response, std::function<void(::grpc::Status)>) override;
      void Stat(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs_service::FileStat* response, std::function<void(::grpc::Status)>) override;
      void Stat(::grpc::ClientContext* context, const ::dfs_service::Request* request, ::dfs_service::FileStat* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Stat(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs_service::FileStat* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void RequestWriteAccess(::grpc::ClientContext* context, const ::dfs_service::WriteAccess* request, ::dfs_service::Ack* response, std::function<void(::grpc::Status)>) override;
      void RequestWriteAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs_service::Ack* response, std::function<void(::grpc::Status)>) override;
      void RequestWriteAccess(::grpc::ClientContext* context, const ::dfs_service::WriteAccess* request, ::dfs_service::Ack* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void RequestWriteAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs_service::Ack* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CallbackList(::grpc::ClientContext* context, const ::dfs_service::Request* request, ::dfs_service::CallbackFileList* response, std::function<void(::grpc::Status)>) override;
      void CallbackList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs_service::CallbackFileList* response, std::function<void(::grpc::Status)>) override;
      void CallbackList(::grpc::ClientContext* context, const ::dfs_service::Request* request, ::dfs_service::CallbackFileList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CallbackList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs_service::CallbackFileList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Delete(::grpc::ClientContext* context, const ::dfs_service::WriteAccess* request, ::dfs_service::Ack* response, std::function<void(::grpc::Status)>) override;
      void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs_service::Ack* response, std::function<void(::grpc::Status)>) override;
      void Delete(::grpc::ClientContext* context, const ::dfs_service::WriteAccess* request, ::dfs_service::Ack* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs_service::Ack* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientWriter< ::dfs_service::FileContent>* StoreRaw(::grpc::ClientContext* context, ::dfs_service::Ack* response) override;
    ::grpc::ClientAsyncWriter< ::dfs_service::FileContent>* AsyncStoreRaw(::grpc::ClientContext* context, ::dfs_service::Ack* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::dfs_service::FileContent>* PrepareAsyncStoreRaw(::grpc::ClientContext* context, ::dfs_service::Ack* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::dfs_service::FileContent>* FetchRaw(::grpc::ClientContext* context, const ::dfs_service::Request& request) override;
    ::grpc::ClientAsyncReader< ::dfs_service::FileContent>* AsyncFetchRaw(::grpc::ClientContext* context, const ::dfs_service::Request& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::dfs_service::FileContent>* PrepareAsyncFetchRaw(::grpc::ClientContext* context, const ::dfs_service::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::dfs_service::FileList>* ListRaw(::grpc::ClientContext* context, const ::dfs_service::Request& request) override;
    ::grpc::ClientAsyncReader< ::dfs_service::FileList>* AsyncListRaw(::grpc::ClientContext* context, const ::dfs_service::Request& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::dfs_service::FileList>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::dfs_service::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dfs_service::FileStat>* AsyncStatRaw(::grpc::ClientContext* context, const ::dfs_service::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dfs_service::FileStat>* PrepareAsyncStatRaw(::grpc::ClientContext* context, const ::dfs_service::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dfs_service::Ack>* AsyncRequestWriteAccessRaw(::grpc::ClientContext* context, const ::dfs_service::WriteAccess& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dfs_service::Ack>* PrepareAsyncRequestWriteAccessRaw(::grpc::ClientContext* context, const ::dfs_service::WriteAccess& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dfs_service::CallbackFileList>* AsyncCallbackListRaw(::grpc::ClientContext* context, const ::dfs_service::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dfs_service::CallbackFileList>* PrepareAsyncCallbackListRaw(::grpc::ClientContext* context, const ::dfs_service::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dfs_service::Ack>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::dfs_service::WriteAccess& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dfs_service::Ack>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::dfs_service::WriteAccess& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Store_;
    const ::grpc::internal::RpcMethod rpcmethod_Fetch_;
    const ::grpc::internal::RpcMethod rpcmethod_List_;
    const ::grpc::internal::RpcMethod rpcmethod_Stat_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestWriteAccess_;
    const ::grpc::internal::RpcMethod rpcmethod_CallbackList_;
    const ::grpc::internal::RpcMethod rpcmethod_Delete_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Add your service calls here
    //
    // 1. REQUIRED (Parts 1 & 2): A method to store files on the server
    virtual ::grpc::Status Store(::grpc::ServerContext* context, ::grpc::ServerReader< ::dfs_service::FileContent>* reader, ::dfs_service::Ack* response);
    // 2. REQUIRED (Parts 1 & 2): A method to fetch files from the server
    virtual ::grpc::Status Fetch(::grpc::ServerContext* context, const ::dfs_service::Request* request, ::grpc::ServerWriter< ::dfs_service::FileContent>* writer);
    // 3. REQUIRED (Parts 1 & 2): A method to list all files on the server
    virtual ::grpc::Status List(::grpc::ServerContext* context, const ::dfs_service::Request* request, ::grpc::ServerWriter< ::dfs_service::FileList>* writer);
    // 4. REQUIRED (Parts 1 & 2): A method to get the status of a file on the server
    virtual ::grpc::Status Stat(::grpc::ServerContext* context, const ::dfs_service::Request* request, ::dfs_service::FileStat* response);
    // 5. REQUIRED (Part 2 only): A method to request a write lock from the server
    virtual ::grpc::Status RequestWriteAccess(::grpc::ServerContext* context, const ::dfs_service::WriteAccess* request, ::dfs_service::Ack* response);
    // 6. REQUIRED (Part 2 only): A method named CallbackList to handle asynchronous file listing requests
    //                            from a client. This method should return a listing of files along with their
    //                            attribute information. The expected attribute information should include name,
    //                            size, modified time, and creation time.
    virtual ::grpc::Status CallbackList(::grpc::ServerContext* context, const ::dfs_service::Request* request, ::dfs_service::CallbackFileList* response);
    // 7. REQUIRED (Part 2 only): A method to delete a file from the server
    virtual ::grpc::Status Delete(::grpc::ServerContext* context, const ::dfs_service::WriteAccess* request, ::dfs_service::Ack* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Store() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Store(::grpc::ServerContext* context, ::grpc::ServerReader< ::dfs_service::FileContent>* reader, ::dfs_service::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStore(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::dfs_service::Ack, ::dfs_service::FileContent>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Fetch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Fetch() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Fetch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Fetch(::grpc::ServerContext* context, const ::dfs_service::Request* request, ::grpc::ServerWriter< ::dfs_service::FileContent>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetch(::grpc::ServerContext* context, ::dfs_service::Request* request, ::grpc::ServerAsyncWriter< ::dfs_service::FileContent>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_List() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::dfs_service::Request* request, ::grpc::ServerWriter< ::dfs_service::FileList>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::dfs_service::Request* request, ::grpc::ServerAsyncWriter< ::dfs_service::FileList>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Stat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Stat() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Stat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stat(::grpc::ServerContext* context, const ::dfs_service::Request* request, ::dfs_service::FileStat* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStat(::grpc::ServerContext* context, ::dfs_service::Request* request, ::grpc::ServerAsyncResponseWriter< ::dfs_service::FileStat>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestWriteAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RequestWriteAccess() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_RequestWriteAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestWriteAccess(::grpc::ServerContext* context, const ::dfs_service::WriteAccess* request, ::dfs_service::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestWriteAccess(::grpc::ServerContext* context, ::dfs_service::WriteAccess* request, ::grpc::ServerAsyncResponseWriter< ::dfs_service::Ack>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CallbackList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CallbackList() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_CallbackList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallbackList(::grpc::ServerContext* context, const ::dfs_service::Request* request, ::dfs_service::CallbackFileList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCallbackList(::grpc::ServerContext* context, ::dfs_service::Request* request, ::grpc::ServerAsyncResponseWriter< ::dfs_service::CallbackFileList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Delete() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::dfs_service::WriteAccess* request, ::dfs_service::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::dfs_service::WriteAccess* request, ::grpc::ServerAsyncResponseWriter< ::dfs_service::Ack>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Store<WithAsyncMethod_Fetch<WithAsyncMethod_List<WithAsyncMethod_Stat<WithAsyncMethod_RequestWriteAccess<WithAsyncMethod_CallbackList<WithAsyncMethod_Delete<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Store() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackClientStreamingHandler< ::dfs_service::FileContent, ::dfs_service::Ack>(
          [this] { return this->Store(); }));
    }
    ~ExperimentalWithCallbackMethod_Store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Store(::grpc::ServerContext* context, ::grpc::ServerReader< ::dfs_service::FileContent>* reader, ::dfs_service::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::dfs_service::FileContent, ::dfs_service::Ack>* Store() {
      return new ::grpc::internal::UnimplementedReadReactor<
        ::dfs_service::FileContent, ::dfs_service::Ack>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Fetch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Fetch() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackServerStreamingHandler< ::dfs_service::Request, ::dfs_service::FileContent>(
          [this] { return this->Fetch(); }));
    }
    ~ExperimentalWithCallbackMethod_Fetch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Fetch(::grpc::ServerContext* context, const ::dfs_service::Request* request, ::grpc::ServerWriter< ::dfs_service::FileContent>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::dfs_service::Request, ::dfs_service::FileContent>* Fetch() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::dfs_service::Request, ::dfs_service::FileContent>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_List() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackServerStreamingHandler< ::dfs_service::Request, ::dfs_service::FileList>(
          [this] { return this->List(); }));
    }
    ~ExperimentalWithCallbackMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::dfs_service::Request* request, ::grpc::ServerWriter< ::dfs_service::FileList>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::dfs_service::Request, ::dfs_service::FileList>* List() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::dfs_service::Request, ::dfs_service::FileList>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Stat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Stat() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::dfs_service::Request, ::dfs_service::FileStat>(
          [this](::grpc::ServerContext* context,
                 const ::dfs_service::Request* request,
                 ::dfs_service::FileStat* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Stat(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Stat(
        ::grpc::experimental::MessageAllocator< ::dfs_service::Request, ::dfs_service::FileStat>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dfs_service::Request, ::dfs_service::FileStat>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Stat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stat(::grpc::ServerContext* context, const ::dfs_service::Request* request, ::dfs_service::FileStat* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Stat(::grpc::ServerContext* context, const ::dfs_service::Request* request, ::dfs_service::FileStat* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RequestWriteAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_RequestWriteAccess() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::dfs_service::WriteAccess, ::dfs_service::Ack>(
          [this](::grpc::ServerContext* context,
                 const ::dfs_service::WriteAccess* request,
                 ::dfs_service::Ack* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->RequestWriteAccess(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_RequestWriteAccess(
        ::grpc::experimental::MessageAllocator< ::dfs_service::WriteAccess, ::dfs_service::Ack>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dfs_service::WriteAccess, ::dfs_service::Ack>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RequestWriteAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestWriteAccess(::grpc::ServerContext* context, const ::dfs_service::WriteAccess* request, ::dfs_service::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RequestWriteAccess(::grpc::ServerContext* context, const ::dfs_service::WriteAccess* request, ::dfs_service::Ack* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CallbackList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CallbackList() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::dfs_service::Request, ::dfs_service::CallbackFileList>(
          [this](::grpc::ServerContext* context,
                 const ::dfs_service::Request* request,
                 ::dfs_service::CallbackFileList* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CallbackList(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CallbackList(
        ::grpc::experimental::MessageAllocator< ::dfs_service::Request, ::dfs_service::CallbackFileList>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dfs_service::Request, ::dfs_service::CallbackFileList>*>(
          ::grpc::Service::experimental().GetHandler(5))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CallbackList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallbackList(::grpc::ServerContext* context, const ::dfs_service::Request* request, ::dfs_service::CallbackFileList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CallbackList(::grpc::ServerContext* context, const ::dfs_service::Request* request, ::dfs_service::CallbackFileList* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Delete() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::dfs_service::WriteAccess, ::dfs_service::Ack>(
          [this](::grpc::ServerContext* context,
                 const ::dfs_service::WriteAccess* request,
                 ::dfs_service::Ack* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Delete(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Delete(
        ::grpc::experimental::MessageAllocator< ::dfs_service::WriteAccess, ::dfs_service::Ack>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dfs_service::WriteAccess, ::dfs_service::Ack>*>(
          ::grpc::Service::experimental().GetHandler(6))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::dfs_service::WriteAccess* request, ::dfs_service::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Delete(::grpc::ServerContext* context, const ::dfs_service::WriteAccess* request, ::dfs_service::Ack* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Store<ExperimentalWithCallbackMethod_Fetch<ExperimentalWithCallbackMethod_List<ExperimentalWithCallbackMethod_Stat<ExperimentalWithCallbackMethod_RequestWriteAccess<ExperimentalWithCallbackMethod_CallbackList<ExperimentalWithCallbackMethod_Delete<Service > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Store() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Store(::grpc::ServerContext* context, ::grpc::ServerReader< ::dfs_service::FileContent>* reader, ::dfs_service::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Fetch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Fetch() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Fetch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Fetch(::grpc::ServerContext* context, const ::dfs_service::Request* request, ::grpc::ServerWriter< ::dfs_service::FileContent>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_List() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::dfs_service::Request* request, ::grpc::ServerWriter< ::dfs_service::FileList>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Stat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Stat() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Stat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stat(::grpc::ServerContext* context, const ::dfs_service::Request* request, ::dfs_service::FileStat* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestWriteAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RequestWriteAccess() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_RequestWriteAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestWriteAccess(::grpc::ServerContext* context, const ::dfs_service::WriteAccess* request, ::dfs_service::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CallbackList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CallbackList() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_CallbackList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallbackList(::grpc::ServerContext* context, const ::dfs_service::Request* request, ::dfs_service::CallbackFileList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Delete() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::dfs_service::WriteAccess* request, ::dfs_service::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Store() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Store(::grpc::ServerContext* context, ::grpc::ServerReader< ::dfs_service::FileContent>* reader, ::dfs_service::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStore(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Fetch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Fetch() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Fetch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Fetch(::grpc::ServerContext* context, const ::dfs_service::Request* request, ::grpc::ServerWriter< ::dfs_service::FileContent>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_List() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::dfs_service::Request* request, ::grpc::ServerWriter< ::dfs_service::FileList>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Stat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Stat() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Stat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stat(::grpc::ServerContext* context, const ::dfs_service::Request* request, ::dfs_service::FileStat* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestWriteAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RequestWriteAccess() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_RequestWriteAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestWriteAccess(::grpc::ServerContext* context, const ::dfs_service::WriteAccess* request, ::dfs_service::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestWriteAccess(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CallbackList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CallbackList() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_CallbackList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallbackList(::grpc::ServerContext* context, const ::dfs_service::Request* request, ::dfs_service::CallbackFileList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCallbackList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Delete() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::dfs_service::WriteAccess* request, ::dfs_service::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Store() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->Store(); }));
    }
    ~ExperimentalWithRawCallbackMethod_Store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Store(::grpc::ServerContext* context, ::grpc::ServerReader< ::dfs_service::FileContent>* reader, ::dfs_service::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Store() {
      return new ::grpc::internal::UnimplementedReadReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Fetch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Fetch() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->Fetch(); }));
    }
    ~ExperimentalWithRawCallbackMethod_Fetch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Fetch(::grpc::ServerContext* context, const ::dfs_service::Request* request, ::grpc::ServerWriter< ::dfs_service::FileContent>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Fetch() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_List() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->List(); }));
    }
    ~ExperimentalWithRawCallbackMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::dfs_service::Request* request, ::grpc::ServerWriter< ::dfs_service::FileList>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* List() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Stat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Stat() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Stat(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Stat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stat(::grpc::ServerContext* context, const ::dfs_service::Request* request, ::dfs_service::FileStat* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Stat(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RequestWriteAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_RequestWriteAccess() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->RequestWriteAccess(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_RequestWriteAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestWriteAccess(::grpc::ServerContext* context, const ::dfs_service::WriteAccess* request, ::dfs_service::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RequestWriteAccess(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CallbackList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CallbackList() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CallbackList(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CallbackList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallbackList(::grpc::ServerContext* context, const ::dfs_service::Request* request, ::dfs_service::CallbackFileList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CallbackList(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Delete() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Delete(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::dfs_service::WriteAccess* request, ::dfs_service::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Delete(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Stat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Stat() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::dfs_service::Request, ::dfs_service::FileStat>(std::bind(&WithStreamedUnaryMethod_Stat<BaseClass>::StreamedStat, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Stat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Stat(::grpc::ServerContext* context, const ::dfs_service::Request* request, ::dfs_service::FileStat* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dfs_service::Request,::dfs_service::FileStat>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestWriteAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RequestWriteAccess() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::dfs_service::WriteAccess, ::dfs_service::Ack>(std::bind(&WithStreamedUnaryMethod_RequestWriteAccess<BaseClass>::StreamedRequestWriteAccess, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RequestWriteAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestWriteAccess(::grpc::ServerContext* context, const ::dfs_service::WriteAccess* request, ::dfs_service::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestWriteAccess(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dfs_service::WriteAccess,::dfs_service::Ack>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CallbackList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CallbackList() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::dfs_service::Request, ::dfs_service::CallbackFileList>(std::bind(&WithStreamedUnaryMethod_CallbackList<BaseClass>::StreamedCallbackList, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CallbackList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CallbackList(::grpc::ServerContext* context, const ::dfs_service::Request* request, ::dfs_service::CallbackFileList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCallbackList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dfs_service::Request,::dfs_service::CallbackFileList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Delete() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::dfs_service::WriteAccess, ::dfs_service::Ack>(std::bind(&WithStreamedUnaryMethod_Delete<BaseClass>::StreamedDelete, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::dfs_service::WriteAccess* request, ::dfs_service::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dfs_service::WriteAccess,::dfs_service::Ack>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Stat<WithStreamedUnaryMethod_RequestWriteAccess<WithStreamedUnaryMethod_CallbackList<WithStreamedUnaryMethod_Delete<Service > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Fetch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_Fetch() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::dfs_service::Request, ::dfs_service::FileContent>(std::bind(&WithSplitStreamingMethod_Fetch<BaseClass>::StreamedFetch, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_Fetch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Fetch(::grpc::ServerContext* context, const ::dfs_service::Request* request, ::grpc::ServerWriter< ::dfs_service::FileContent>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedFetch(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::dfs_service::Request,::dfs_service::FileContent>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_List() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler< ::dfs_service::Request, ::dfs_service::FileList>(std::bind(&WithSplitStreamingMethod_List<BaseClass>::StreamedList, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::dfs_service::Request* request, ::grpc::ServerWriter< ::dfs_service::FileList>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedList(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::dfs_service::Request,::dfs_service::FileList>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Fetch<WithSplitStreamingMethod_List<Service > > SplitStreamedService;
  typedef WithSplitStreamingMethod_Fetch<WithSplitStreamingMethod_List<WithStreamedUnaryMethod_Stat<WithStreamedUnaryMethod_RequestWriteAccess<WithStreamedUnaryMethod_CallbackList<WithStreamedUnaryMethod_Delete<Service > > > > > > StreamedService;
};

}  // namespace dfs_service


#endif  // GRPC_dfs_2dservice_2eproto__INCLUDED
