// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dfs-service.proto

#ifndef PROTOBUF_INCLUDED_dfs_2dservice_2eproto
#define PROTOBUF_INCLUDED_dfs_2dservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dfs_2dservice_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_dfs_2dservice_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_dfs_2dservice_2eproto();
namespace dfs_service {
class Ack;
class AckDefaultTypeInternal;
extern AckDefaultTypeInternal _Ack_default_instance_;
class CallbackFileList;
class CallbackFileListDefaultTypeInternal;
extern CallbackFileListDefaultTypeInternal _CallbackFileList_default_instance_;
class FileContent;
class FileContentDefaultTypeInternal;
extern FileContentDefaultTypeInternal _FileContent_default_instance_;
class FileList;
class FileListDefaultTypeInternal;
extern FileListDefaultTypeInternal _FileList_default_instance_;
class FileStat;
class FileStatDefaultTypeInternal;
extern FileStatDefaultTypeInternal _FileStat_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class WriteAccess;
class WriteAccessDefaultTypeInternal;
extern WriteAccessDefaultTypeInternal _WriteAccess_default_instance_;
}  // namespace dfs_service
namespace google {
namespace protobuf {
template<> ::dfs_service::Ack* Arena::CreateMaybeMessage<::dfs_service::Ack>(Arena*);
template<> ::dfs_service::CallbackFileList* Arena::CreateMaybeMessage<::dfs_service::CallbackFileList>(Arena*);
template<> ::dfs_service::FileContent* Arena::CreateMaybeMessage<::dfs_service::FileContent>(Arena*);
template<> ::dfs_service::FileList* Arena::CreateMaybeMessage<::dfs_service::FileList>(Arena*);
template<> ::dfs_service::FileStat* Arena::CreateMaybeMessage<::dfs_service::FileStat>(Arena*);
template<> ::dfs_service::Request* Arena::CreateMaybeMessage<::dfs_service::Request>(Arena*);
template<> ::dfs_service::WriteAccess* Arena::CreateMaybeMessage<::dfs_service::WriteAccess>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace dfs_service {

// ===================================================================

class Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfs_service.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:dfs_service.Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dfs_2dservice_2eproto;
};
// -------------------------------------------------------------------

class Ack final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfs_service.Ack) */ {
 public:
  Ack();
  virtual ~Ack();

  Ack(const Ack& from);

  inline Ack& operator=(const Ack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ack(Ack&& from) noexcept
    : Ack() {
    *this = ::std::move(from);
  }

  inline Ack& operator=(Ack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Ack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ack* internal_default_instance() {
    return reinterpret_cast<const Ack*>(
               &_Ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Ack* other);
  friend void swap(Ack& a, Ack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ack* New() const final {
    return CreateMaybeMessage<Ack>(nullptr);
  }

  Ack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ack& from);
  void MergeFrom(const Ack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:dfs_service.Ack)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dfs_2dservice_2eproto;
};
// -------------------------------------------------------------------

class WriteAccess final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfs_service.WriteAccess) */ {
 public:
  WriteAccess();
  virtual ~WriteAccess();

  WriteAccess(const WriteAccess& from);

  inline WriteAccess& operator=(const WriteAccess& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WriteAccess(WriteAccess&& from) noexcept
    : WriteAccess() {
    *this = ::std::move(from);
  }

  inline WriteAccess& operator=(WriteAccess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WriteAccess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteAccess* internal_default_instance() {
    return reinterpret_cast<const WriteAccess*>(
               &_WriteAccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(WriteAccess* other);
  friend void swap(WriteAccess& a, WriteAccess& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WriteAccess* New() const final {
    return CreateMaybeMessage<WriteAccess>(nullptr);
  }

  WriteAccess* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WriteAccess>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WriteAccess& from);
  void MergeFrom(const WriteAccess& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteAccess* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string filename = 1;
  void clear_filename();
  static const int kFilenameFieldNumber = 1;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // string clientid = 2;
  void clear_clientid();
  static const int kClientidFieldNumber = 2;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientid(::std::string&& value);
  #endif
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // @@protoc_insertion_point(class_scope:dfs_service.WriteAccess)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dfs_2dservice_2eproto;
};
// -------------------------------------------------------------------

class FileContent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfs_service.FileContent) */ {
 public:
  FileContent();
  virtual ~FileContent();

  FileContent(const FileContent& from);

  inline FileContent& operator=(const FileContent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileContent(FileContent&& from) noexcept
    : FileContent() {
    *this = ::std::move(from);
  }

  inline FileContent& operator=(FileContent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FileContent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileContent* internal_default_instance() {
    return reinterpret_cast<const FileContent*>(
               &_FileContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(FileContent* other);
  friend void swap(FileContent& a, FileContent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileContent* New() const final {
    return CreateMaybeMessage<FileContent>(nullptr);
  }

  FileContent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileContent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileContent& from);
  void MergeFrom(const FileContent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileContent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string clientid = 2;
  void clear_clientid();
  static const int kClientidFieldNumber = 2;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientid(::std::string&& value);
  #endif
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // bytes foo = 5;
  void clear_foo();
  static const int kFooFieldNumber = 5;
  const ::std::string& foo() const;
  void set_foo(const ::std::string& value);
  #if LANG_CXX11
  void set_foo(::std::string&& value);
  #endif
  void set_foo(const char* value);
  void set_foo(const void* value, size_t size);
  ::std::string* mutable_foo();
  ::std::string* release_foo();
  void set_allocated_foo(::std::string* foo);

  // @@protoc_insertion_point(class_scope:dfs_service.FileContent)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  ::google::protobuf::internal::ArenaStringPtr foo_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dfs_2dservice_2eproto;
};
// -------------------------------------------------------------------

class FileList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfs_service.FileList) */ {
 public:
  FileList();
  virtual ~FileList();

  FileList(const FileList& from);

  inline FileList& operator=(const FileList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileList(FileList&& from) noexcept
    : FileList() {
    *this = ::std::move(from);
  }

  inline FileList& operator=(FileList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FileList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileList* internal_default_instance() {
    return reinterpret_cast<const FileList*>(
               &_FileList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(FileList* other);
  friend void swap(FileList& a, FileList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileList* New() const final {
    return CreateMaybeMessage<FileList>(nullptr);
  }

  FileList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileList& from);
  void MergeFrom(const FileList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 mtime = 2;
  void clear_mtime();
  static const int kMtimeFieldNumber = 2;
  ::google::protobuf::int32 mtime() const;
  void set_mtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dfs_service.FileList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 mtime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dfs_2dservice_2eproto;
};
// -------------------------------------------------------------------

class FileStat final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfs_service.FileStat) */ {
 public:
  FileStat();
  virtual ~FileStat();

  FileStat(const FileStat& from);

  inline FileStat& operator=(const FileStat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileStat(FileStat&& from) noexcept
    : FileStat() {
    *this = ::std::move(from);
  }

  inline FileStat& operator=(FileStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FileStat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileStat* internal_default_instance() {
    return reinterpret_cast<const FileStat*>(
               &_FileStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(FileStat* other);
  friend void swap(FileStat& a, FileStat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileStat* New() const final {
    return CreateMaybeMessage<FileStat>(nullptr);
  }

  FileStat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileStat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileStat& from);
  void MergeFrom(const FileStat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileStat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint32 crc = 2;
  void clear_crc();
  static const int kCrcFieldNumber = 2;
  ::google::protobuf::uint32 crc() const;
  void set_crc(::google::protobuf::uint32 value);

  // int32 mtime = 3;
  void clear_mtime();
  static const int kMtimeFieldNumber = 3;
  ::google::protobuf::int32 mtime() const;
  void set_mtime(::google::protobuf::int32 value);

  // int32 size = 4;
  void clear_size();
  static const int kSizeFieldNumber = 4;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // int32 creationTime = 5;
  void clear_creationtime();
  static const int kCreationTimeFieldNumber = 5;
  ::google::protobuf::int32 creationtime() const;
  void set_creationtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dfs_service.FileStat)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 crc_;
  ::google::protobuf::int32 mtime_;
  ::google::protobuf::int32 size_;
  ::google::protobuf::int32 creationtime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dfs_2dservice_2eproto;
};
// -------------------------------------------------------------------

class CallbackFileList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfs_service.CallbackFileList) */ {
 public:
  CallbackFileList();
  virtual ~CallbackFileList();

  CallbackFileList(const CallbackFileList& from);

  inline CallbackFileList& operator=(const CallbackFileList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CallbackFileList(CallbackFileList&& from) noexcept
    : CallbackFileList() {
    *this = ::std::move(from);
  }

  inline CallbackFileList& operator=(CallbackFileList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CallbackFileList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CallbackFileList* internal_default_instance() {
    return reinterpret_cast<const CallbackFileList*>(
               &_CallbackFileList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CallbackFileList* other);
  friend void swap(CallbackFileList& a, CallbackFileList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CallbackFileList* New() const final {
    return CreateMaybeMessage<CallbackFileList>(nullptr);
  }

  CallbackFileList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CallbackFileList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CallbackFileList& from);
  void MergeFrom(const CallbackFileList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallbackFileList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dfs_service.FileStat stat = 1;
  int stat_size() const;
  void clear_stat();
  static const int kStatFieldNumber = 1;
  ::dfs_service::FileStat* mutable_stat(int index);
  ::google::protobuf::RepeatedPtrField< ::dfs_service::FileStat >*
      mutable_stat();
  const ::dfs_service::FileStat& stat(int index) const;
  ::dfs_service::FileStat* add_stat();
  const ::google::protobuf::RepeatedPtrField< ::dfs_service::FileStat >&
      stat() const;

  // @@protoc_insertion_point(class_scope:dfs_service.CallbackFileList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::dfs_service::FileStat > stat_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dfs_2dservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// string name = 1;
inline void Request::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::name() const {
  // @@protoc_insertion_point(field_get:dfs_service.Request.name)
  return name_.GetNoArena();
}
inline void Request::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfs_service.Request.name)
}
#if LANG_CXX11
inline void Request::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dfs_service.Request.name)
}
#endif
inline void Request::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfs_service.Request.name)
}
inline void Request::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfs_service.Request.name)
}
inline ::std::string* Request::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dfs_service.Request.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_name() {
  // @@protoc_insertion_point(field_release:dfs_service.Request.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dfs_service.Request.name)
}

// -------------------------------------------------------------------

// Ack

// string message = 1;
inline void Ack::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Ack::message() const {
  // @@protoc_insertion_point(field_get:dfs_service.Ack.message)
  return message_.GetNoArena();
}
inline void Ack::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfs_service.Ack.message)
}
#if LANG_CXX11
inline void Ack::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dfs_service.Ack.message)
}
#endif
inline void Ack::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfs_service.Ack.message)
}
inline void Ack::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfs_service.Ack.message)
}
inline ::std::string* Ack::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:dfs_service.Ack.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Ack::release_message() {
  // @@protoc_insertion_point(field_release:dfs_service.Ack.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Ack::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:dfs_service.Ack.message)
}

// -------------------------------------------------------------------

// WriteAccess

// string filename = 1;
inline void WriteAccess::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WriteAccess::filename() const {
  // @@protoc_insertion_point(field_get:dfs_service.WriteAccess.filename)
  return filename_.GetNoArena();
}
inline void WriteAccess::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfs_service.WriteAccess.filename)
}
#if LANG_CXX11
inline void WriteAccess::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dfs_service.WriteAccess.filename)
}
#endif
inline void WriteAccess::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfs_service.WriteAccess.filename)
}
inline void WriteAccess::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfs_service.WriteAccess.filename)
}
inline ::std::string* WriteAccess::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:dfs_service.WriteAccess.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WriteAccess::release_filename() {
  // @@protoc_insertion_point(field_release:dfs_service.WriteAccess.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteAccess::set_allocated_filename(::std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:dfs_service.WriteAccess.filename)
}

// string clientid = 2;
inline void WriteAccess::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WriteAccess::clientid() const {
  // @@protoc_insertion_point(field_get:dfs_service.WriteAccess.clientid)
  return clientid_.GetNoArena();
}
inline void WriteAccess::set_clientid(const ::std::string& value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfs_service.WriteAccess.clientid)
}
#if LANG_CXX11
inline void WriteAccess::set_clientid(::std::string&& value) {
  
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dfs_service.WriteAccess.clientid)
}
#endif
inline void WriteAccess::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfs_service.WriteAccess.clientid)
}
inline void WriteAccess::set_clientid(const char* value, size_t size) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfs_service.WriteAccess.clientid)
}
inline ::std::string* WriteAccess::mutable_clientid() {
  
  // @@protoc_insertion_point(field_mutable:dfs_service.WriteAccess.clientid)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WriteAccess::release_clientid() {
  // @@protoc_insertion_point(field_release:dfs_service.WriteAccess.clientid)
  
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteAccess::set_allocated_clientid(::std::string* clientid) {
  if (clientid != nullptr) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:dfs_service.WriteAccess.clientid)
}

// -------------------------------------------------------------------

// FileContent

// string name = 1;
inline void FileContent::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileContent::name() const {
  // @@protoc_insertion_point(field_get:dfs_service.FileContent.name)
  return name_.GetNoArena();
}
inline void FileContent::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfs_service.FileContent.name)
}
#if LANG_CXX11
inline void FileContent::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dfs_service.FileContent.name)
}
#endif
inline void FileContent::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfs_service.FileContent.name)
}
inline void FileContent::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfs_service.FileContent.name)
}
inline ::std::string* FileContent::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dfs_service.FileContent.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileContent::release_name() {
  // @@protoc_insertion_point(field_release:dfs_service.FileContent.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileContent::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dfs_service.FileContent.name)
}

// string clientid = 2;
inline void FileContent::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileContent::clientid() const {
  // @@protoc_insertion_point(field_get:dfs_service.FileContent.clientid)
  return clientid_.GetNoArena();
}
inline void FileContent::set_clientid(const ::std::string& value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfs_service.FileContent.clientid)
}
#if LANG_CXX11
inline void FileContent::set_clientid(::std::string&& value) {
  
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dfs_service.FileContent.clientid)
}
#endif
inline void FileContent::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfs_service.FileContent.clientid)
}
inline void FileContent::set_clientid(const char* value, size_t size) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfs_service.FileContent.clientid)
}
inline ::std::string* FileContent::mutable_clientid() {
  
  // @@protoc_insertion_point(field_mutable:dfs_service.FileContent.clientid)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileContent::release_clientid() {
  // @@protoc_insertion_point(field_release:dfs_service.FileContent.clientid)
  
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileContent::set_allocated_clientid(::std::string* clientid) {
  if (clientid != nullptr) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:dfs_service.FileContent.clientid)
}

// bytes foo = 5;
inline void FileContent::clear_foo() {
  foo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileContent::foo() const {
  // @@protoc_insertion_point(field_get:dfs_service.FileContent.foo)
  return foo_.GetNoArena();
}
inline void FileContent::set_foo(const ::std::string& value) {
  
  foo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfs_service.FileContent.foo)
}
#if LANG_CXX11
inline void FileContent::set_foo(::std::string&& value) {
  
  foo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dfs_service.FileContent.foo)
}
#endif
inline void FileContent::set_foo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  foo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfs_service.FileContent.foo)
}
inline void FileContent::set_foo(const void* value, size_t size) {
  
  foo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfs_service.FileContent.foo)
}
inline ::std::string* FileContent::mutable_foo() {
  
  // @@protoc_insertion_point(field_mutable:dfs_service.FileContent.foo)
  return foo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileContent::release_foo() {
  // @@protoc_insertion_point(field_release:dfs_service.FileContent.foo)
  
  return foo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileContent::set_allocated_foo(::std::string* foo) {
  if (foo != nullptr) {
    
  } else {
    
  }
  foo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), foo);
  // @@protoc_insertion_point(field_set_allocated:dfs_service.FileContent.foo)
}

// -------------------------------------------------------------------

// FileList

// string name = 1;
inline void FileList::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileList::name() const {
  // @@protoc_insertion_point(field_get:dfs_service.FileList.name)
  return name_.GetNoArena();
}
inline void FileList::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfs_service.FileList.name)
}
#if LANG_CXX11
inline void FileList::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dfs_service.FileList.name)
}
#endif
inline void FileList::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfs_service.FileList.name)
}
inline void FileList::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfs_service.FileList.name)
}
inline ::std::string* FileList::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dfs_service.FileList.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileList::release_name() {
  // @@protoc_insertion_point(field_release:dfs_service.FileList.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileList::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dfs_service.FileList.name)
}

// int32 mtime = 2;
inline void FileList::clear_mtime() {
  mtime_ = 0;
}
inline ::google::protobuf::int32 FileList::mtime() const {
  // @@protoc_insertion_point(field_get:dfs_service.FileList.mtime)
  return mtime_;
}
inline void FileList::set_mtime(::google::protobuf::int32 value) {
  
  mtime_ = value;
  // @@protoc_insertion_point(field_set:dfs_service.FileList.mtime)
}

// -------------------------------------------------------------------

// FileStat

// string name = 1;
inline void FileStat::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileStat::name() const {
  // @@protoc_insertion_point(field_get:dfs_service.FileStat.name)
  return name_.GetNoArena();
}
inline void FileStat::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfs_service.FileStat.name)
}
#if LANG_CXX11
inline void FileStat::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dfs_service.FileStat.name)
}
#endif
inline void FileStat::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfs_service.FileStat.name)
}
inline void FileStat::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfs_service.FileStat.name)
}
inline ::std::string* FileStat::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dfs_service.FileStat.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileStat::release_name() {
  // @@protoc_insertion_point(field_release:dfs_service.FileStat.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileStat::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dfs_service.FileStat.name)
}

// uint32 crc = 2;
inline void FileStat::clear_crc() {
  crc_ = 0u;
}
inline ::google::protobuf::uint32 FileStat::crc() const {
  // @@protoc_insertion_point(field_get:dfs_service.FileStat.crc)
  return crc_;
}
inline void FileStat::set_crc(::google::protobuf::uint32 value) {
  
  crc_ = value;
  // @@protoc_insertion_point(field_set:dfs_service.FileStat.crc)
}

// int32 mtime = 3;
inline void FileStat::clear_mtime() {
  mtime_ = 0;
}
inline ::google::protobuf::int32 FileStat::mtime() const {
  // @@protoc_insertion_point(field_get:dfs_service.FileStat.mtime)
  return mtime_;
}
inline void FileStat::set_mtime(::google::protobuf::int32 value) {
  
  mtime_ = value;
  // @@protoc_insertion_point(field_set:dfs_service.FileStat.mtime)
}

// int32 size = 4;
inline void FileStat::clear_size() {
  size_ = 0;
}
inline ::google::protobuf::int32 FileStat::size() const {
  // @@protoc_insertion_point(field_get:dfs_service.FileStat.size)
  return size_;
}
inline void FileStat::set_size(::google::protobuf::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:dfs_service.FileStat.size)
}

// int32 creationTime = 5;
inline void FileStat::clear_creationtime() {
  creationtime_ = 0;
}
inline ::google::protobuf::int32 FileStat::creationtime() const {
  // @@protoc_insertion_point(field_get:dfs_service.FileStat.creationTime)
  return creationtime_;
}
inline void FileStat::set_creationtime(::google::protobuf::int32 value) {
  
  creationtime_ = value;
  // @@protoc_insertion_point(field_set:dfs_service.FileStat.creationTime)
}

// -------------------------------------------------------------------

// CallbackFileList

// repeated .dfs_service.FileStat stat = 1;
inline int CallbackFileList::stat_size() const {
  return stat_.size();
}
inline void CallbackFileList::clear_stat() {
  stat_.Clear();
}
inline ::dfs_service::FileStat* CallbackFileList::mutable_stat(int index) {
  // @@protoc_insertion_point(field_mutable:dfs_service.CallbackFileList.stat)
  return stat_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::dfs_service::FileStat >*
CallbackFileList::mutable_stat() {
  // @@protoc_insertion_point(field_mutable_list:dfs_service.CallbackFileList.stat)
  return &stat_;
}
inline const ::dfs_service::FileStat& CallbackFileList::stat(int index) const {
  // @@protoc_insertion_point(field_get:dfs_service.CallbackFileList.stat)
  return stat_.Get(index);
}
inline ::dfs_service::FileStat* CallbackFileList::add_stat() {
  // @@protoc_insertion_point(field_add:dfs_service.CallbackFileList.stat)
  return stat_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dfs_service::FileStat >&
CallbackFileList::stat() const {
  // @@protoc_insertion_point(field_list:dfs_service.CallbackFileList.stat)
  return stat_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dfs_service

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_dfs_2dservice_2eproto
